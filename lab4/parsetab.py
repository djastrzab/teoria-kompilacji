
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=ASSIGNPLUSASSIGNMINUSASSIGNTIMESASSIGNDIVIDEnonassoc<>EQNEQLEQGEQleft+-MPLUSMMINUSleft*/MTIMESMDIVIDEleft\'rightUNARYASSIGNDIVIDE ASSIGNMINUS ASSIGNPLUS ASSIGNTIMES BREAK CONTINUE ELSE EQ EYE FLOATNUMBER FOR GEQ ID IF INTNUMBER LEQ MDIVIDE MMINUS MPLUS MTIMES NEQ ONES PRINT RETURN STRING WHILE ZEROSstart : \n            | morestatementsmorestatements : block\n                    |  statement morestatementsblock : statement\n            | \'{\' morestatements \'}\'statement : ifstatement\n                | loop\n                | expr \';\'\n                | returnstatement \';\'\n                | assignstatement \';\'\n                | printstatement \';\'\n                | BREAK \';\'\n                | CONTINUE \';\'returnstatement : RETURN \n                        | RETURN exprprintstatement : PRINT printablesprintables : printable\n                | printable \',\' printablesprintable : exprprintable : STRINGassignstatement : assignable \'=\' expr\n                        | assignable ASSIGNPLUS expr\n                        | assignable ASSIGNMINUS expr\n                        | assignable ASSIGNTIMES expr\n                        | assignable ASSIGNDIVIDE exprassignable : ID\n                    | ID \'[\' expr \',\' expr \']\'expr :  assignableexpr : INTNUMBER expr : FLOATNUMBERexpr : \'-\' expr %prec UNARY\n            | expr "\'"\n            | specialmatrixword \'(\' expr \')\'\n            | \'(\' expr \')\' \n            | \'[\' matrixinitializer \']\'\n            | expr \'+\' expr\n            | expr \'-\' expr\n            | expr \'*\' expr\n            | expr \'/\' expr\n            | expr MPLUS expr\n            | expr MMINUS expr\n            | expr MTIMES expr\n            | expr MDIVIDE expr\n            | expr EQ expr\n            | expr NEQ expr\n            | expr \'>\' expr\n            | expr \'<\' expr\n            | expr LEQ expr\n            | expr GEQ expr\n            specialmatrixword : ZEROS\n                            | ONES\n                            | EYEifstatement : IF \'(\' expr \')\' block %prec IFX\n                    | IF \'(\' expr \')\' block ELSE blockloop : forloop\n            | whileloopforloop : FOR ID \'=\' rangeoperator blockwhileloop : WHILE \'(\' expr \')\' blockrangeoperator : expr \':\' expr matrixinitializer : innerlistmatrixinitializer : morelistmorelist : vector\n                | vector \',\' morelistvector : \'[\' innerlist  \']\'innerlist : expr  \n                | expr \',\' innerlist'
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,16,17,32,34,50,51,52,53,54,79,121,122,124,127,131,],[-1,0,-2,-3,-5,-7,-8,-56,-57,-4,-9,-10,-11,-12,-13,-14,-6,-54,-5,-58,-59,-55,]),'{':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[5,5,5,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,5,-34,5,5,-54,-5,-58,-59,5,-60,-28,-55,]),'BREAK':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[12,12,12,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,12,-34,12,12,-54,-5,-58,-59,12,-60,-28,-55,]),'CONTINUE':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[13,13,13,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,13,-34,13,13,-54,-5,-58,-59,13,-60,-28,-55,]),'IF':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[14,14,14,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,14,-34,14,14,-54,-5,-58,-59,14,-60,-28,-55,]),'INTNUMBER':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[19,19,19,-7,-8,19,-56,-57,-30,-31,19,19,19,19,-27,-9,-33,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-10,-11,-12,-13,-14,19,-29,19,19,19,19,19,-32,19,19,19,19,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,19,19,19,19,-34,19,19,19,19,-54,-5,-58,19,-59,19,-60,-28,-55,]),'FLOATNUMBER':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[20,20,20,-7,-8,20,-56,-57,-30,-31,20,20,20,20,-27,-9,-33,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-10,-11,-12,-13,-14,20,-29,20,20,20,20,20,-32,20,20,20,20,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,20,20,20,20,-34,20,20,20,20,-54,-5,-58,20,-59,20,-60,-28,-55,]),'-':([0,4,5,6,7,8,15,16,17,18,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,71,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,106,107,108,109,110,111,115,117,118,119,120,121,122,124,125,126,127,128,129,130,131,],[21,21,21,-7,-8,37,21,-56,-57,-29,-30,-31,21,21,21,21,-27,-9,-33,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-10,-11,-12,-13,-14,21,37,-29,21,21,21,21,21,-32,21,21,37,37,37,21,21,-6,-37,-38,-39,-40,-41,-42,-43,-44,37,37,37,37,37,37,37,-35,37,37,37,37,37,37,-36,21,21,21,37,37,21,-34,21,21,37,21,21,-54,-5,-58,21,37,-59,21,37,-28,-55,]),'(':([0,4,5,6,7,14,15,16,17,19,20,21,22,23,24,25,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[15,15,15,-7,-8,55,15,-56,-57,-30,-31,15,64,15,15,15,-27,78,-51,-52,-53,-9,-33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-10,-11,-12,-13,-14,15,-29,15,15,15,15,15,-32,15,15,15,15,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,15,15,15,15,-34,15,15,15,15,-54,-5,-58,15,-59,15,-60,-28,-55,]),'[':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,105,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[23,23,23,-7,-8,23,-56,-57,-30,-31,23,65,23,23,77,-9,-33,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-10,-11,-12,-13,-14,23,-29,23,23,23,23,23,-32,23,65,23,23,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,23,115,23,23,23,-34,23,23,23,23,-54,-5,-58,23,-59,23,-60,-28,-55,]),'RETURN':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[24,24,24,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,24,-34,24,24,-54,-5,-58,-59,24,-60,-28,-55,]),'PRINT':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[25,25,25,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,25,-34,25,25,-54,-5,-58,-59,25,-60,-28,-55,]),'FOR':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[26,26,26,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,26,-34,26,26,-54,-5,-58,-59,26,-60,-28,-55,]),'WHILE':([0,4,5,6,7,16,17,19,20,27,34,35,50,51,52,53,54,57,63,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,110,111,117,120,121,122,124,127,128,129,130,131,],[28,28,28,-7,-8,-56,-57,-30,-31,-27,-9,-33,-10,-11,-12,-13,-14,-29,-32,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,28,-34,28,28,-54,-5,-58,-59,28,-60,-28,-55,]),'ID':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[27,27,27,-7,-8,27,-56,-57,-30,-31,27,27,27,27,76,-27,-9,-33,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-10,-11,-12,-13,-14,27,-29,27,27,27,27,27,-32,27,27,27,27,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,27,27,27,27,-34,27,27,27,27,-54,-5,-58,27,-59,27,-60,-28,-55,]),'ZEROS':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[29,29,29,-7,-8,29,-56,-57,-30,-31,29,29,29,29,-27,-9,-33,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-10,-11,-12,-13,-14,29,-29,29,29,29,29,29,-32,29,29,29,29,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,29,29,29,29,-34,29,29,29,29,-54,-5,-58,29,-59,29,-60,-28,-55,]),'ONES':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[30,30,30,-7,-8,30,-56,-57,-30,-31,30,30,30,30,-27,-9,-33,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-10,-11,-12,-13,-14,30,-29,30,30,30,30,30,-32,30,30,30,30,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,30,30,30,30,-34,30,30,30,30,-54,-5,-58,30,-59,30,-60,-28,-55,]),'EYE':([0,4,5,6,7,15,16,17,19,20,21,23,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,104,106,107,110,111,115,117,119,120,121,122,124,125,127,128,129,130,131,],[31,31,31,-7,-8,31,-56,-57,-30,-31,31,31,31,31,-27,-9,-33,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-10,-11,-12,-13,-14,31,-29,31,31,31,31,31,-32,31,31,31,31,-6,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,31,31,31,31,-34,31,31,31,31,-54,-5,-58,31,-59,31,-60,-28,-55,]),'}':([3,4,6,7,16,17,32,33,34,50,51,52,53,54,79,121,122,124,127,131,],[-3,-5,-7,-8,-56,-57,-4,79,-9,-10,-11,-12,-13,-14,-6,-54,-5,-58,-59,-55,]),'ELSE':([6,7,16,17,34,50,51,52,53,54,79,121,122,124,127,131,],[-7,-8,-56,-57,-9,-10,-11,-12,-13,-14,-6,128,-5,-58,-59,-55,]),';':([8,9,10,11,12,13,18,19,20,24,27,35,57,63,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,103,111,116,130,],[34,50,51,52,53,54,-29,-30,-31,-15,-27,-33,-29,-32,-16,-17,-18,-20,-21,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-22,-23,-24,-25,-26,-36,-34,-19,-28,]),"'":([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[35,-29,-30,-31,-27,-33,35,-29,-32,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-35,35,35,35,35,35,35,-36,35,35,-34,35,35,35,-28,]),'+':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[36,-29,-30,-31,-27,-33,36,-29,-32,36,36,36,-37,-38,-39,-40,-41,-42,-43,-44,36,36,36,36,36,36,36,-35,36,36,36,36,36,36,-36,36,36,-34,36,36,36,-28,]),'*':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[38,-29,-30,-31,-27,-33,38,-29,-32,38,38,38,38,38,-39,-40,38,38,-43,-44,38,38,38,38,38,38,38,-35,38,38,38,38,38,38,-36,38,38,-34,38,38,38,-28,]),'/':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[39,-29,-30,-31,-27,-33,39,-29,-32,39,39,39,39,39,-39,-40,39,39,-43,-44,39,39,39,39,39,39,39,-35,39,39,39,39,39,39,-36,39,39,-34,39,39,39,-28,]),'MPLUS':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[40,-29,-30,-31,-27,-33,40,-29,-32,40,40,40,-37,-38,-39,-40,-41,-42,-43,-44,40,40,40,40,40,40,40,-35,40,40,40,40,40,40,-36,40,40,-34,40,40,40,-28,]),'MMINUS':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[41,-29,-30,-31,-27,-33,41,-29,-32,41,41,41,-37,-38,-39,-40,-41,-42,-43,-44,41,41,41,41,41,41,41,-35,41,41,41,41,41,41,-36,41,41,-34,41,41,41,-28,]),'MTIMES':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[42,-29,-30,-31,-27,-33,42,-29,-32,42,42,42,42,42,-39,-40,42,42,-43,-44,42,42,42,42,42,42,42,-35,42,42,42,42,42,42,-36,42,42,-34,42,42,42,-28,]),'MDIVIDE':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[43,-29,-30,-31,-27,-33,43,-29,-32,43,43,43,43,43,-39,-40,43,43,-43,-44,43,43,43,43,43,43,43,-35,43,43,43,43,43,43,-36,43,43,-34,43,43,43,-28,]),'EQ':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[44,-29,-30,-31,-27,-33,44,-29,-32,44,44,44,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,44,-35,44,44,44,44,44,44,-36,44,44,-34,44,44,44,-28,]),'NEQ':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[45,-29,-30,-31,-27,-33,45,-29,-32,45,45,45,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,45,-35,45,45,45,45,45,45,-36,45,45,-34,45,45,45,-28,]),'>':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[46,-29,-30,-31,-27,-33,46,-29,-32,46,46,46,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,46,-35,46,46,46,46,46,46,-36,46,46,-34,46,46,46,-28,]),'<':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[47,-29,-30,-31,-27,-33,47,-29,-32,47,47,47,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,47,-35,47,47,47,47,47,47,-36,47,47,-34,47,47,47,-28,]),'LEQ':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[48,-29,-30,-31,-27,-33,48,-29,-32,48,48,48,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,48,-35,48,48,48,48,48,48,-36,48,48,-34,48,48,48,-28,]),'GEQ':([8,18,19,20,27,35,56,57,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,108,109,111,118,126,129,130,],[49,-29,-30,-31,-27,-33,49,-29,-32,49,49,49,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,49,-35,49,49,49,49,49,49,-36,49,49,-34,49,49,49,-28,]),'=':([18,27,76,130,],[58,-27,107,-28,]),'ASSIGNPLUS':([18,27,130,],[59,-27,-28,]),'ASSIGNMINUS':([18,27,130,],[60,-27,-28,]),'ASSIGNTIMES':([18,27,130,],[61,-27,-28,]),'ASSIGNDIVIDE':([18,27,130,],[62,-27,-28,]),')':([19,20,27,35,56,57,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,103,109,111,130,],[-30,-31,-27,-33,95,-29,-32,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,110,-35,111,-36,120,-34,-28,]),',':([19,20,27,35,57,63,69,70,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,108,111,112,130,],[-30,-31,-27,-33,-29,-32,104,105,106,-20,-21,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,119,-34,-65,-28,]),']':([19,20,27,35,57,63,66,67,68,69,70,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,102,103,111,112,113,114,123,126,130,],[-30,-31,-27,-33,-29,-32,103,-61,-62,-66,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,112,-36,-34,-65,-67,-64,112,130,-28,]),':':([19,20,27,35,57,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,103,111,118,130,],[-30,-31,-27,-33,-29,-32,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-35,-36,-34,125,-28,]),'STRING':([25,106,],[75,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'morestatements':([0,4,5,],[2,32,33,]),'block':([0,4,5,110,117,120,128,],[3,3,3,121,124,127,131,]),'statement':([0,4,5,110,117,120,128,],[4,4,4,122,122,122,122,]),'ifstatement':([0,4,5,110,117,120,128,],[6,6,6,6,6,6,6,]),'loop':([0,4,5,110,117,120,128,],[7,7,7,7,7,7,7,]),'expr':([0,4,5,15,21,23,24,25,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,64,65,77,78,104,106,107,110,115,117,119,120,125,128,],[8,8,8,56,63,69,71,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,69,108,109,69,74,118,8,69,8,126,8,129,8,]),'returnstatement':([0,4,5,110,117,120,128,],[9,9,9,9,9,9,9,]),'assignstatement':([0,4,5,110,117,120,128,],[10,10,10,10,10,10,10,]),'printstatement':([0,4,5,110,117,120,128,],[11,11,11,11,11,11,11,]),'forloop':([0,4,5,110,117,120,128,],[16,16,16,16,16,16,16,]),'whileloop':([0,4,5,110,117,120,128,],[17,17,17,17,17,17,17,]),'assignable':([0,4,5,15,21,23,24,25,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,64,65,77,78,104,106,107,110,115,117,119,120,125,128,],[18,18,18,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,18,57,18,57,18,57,18,]),'specialmatrixword':([0,4,5,15,21,23,24,25,36,37,38,39,40,41,42,43,44,45,46,47,48,49,55,58,59,60,61,62,64,65,77,78,104,106,107,110,115,117,119,120,125,128,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'matrixinitializer':([23,65,],[66,66,]),'innerlist':([23,65,104,115,],[67,102,113,123,]),'morelist':([23,65,105,],[68,68,114,]),'vector':([23,65,105,],[70,70,70,]),'printables':([25,106,],[72,116,]),'printable':([25,106,],[73,73,]),'rangeoperator':([107,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> <empty>','start',0,'p_start','Mparser.py',33),
  ('start -> morestatements','start',1,'p_start','Mparser.py',34),
  ('morestatements -> block','morestatements',1,'p_more_statements','Mparser.py',39),
  ('morestatements -> statement morestatements','morestatements',2,'p_more_statements','Mparser.py',40),
  ('block -> statement','block',1,'p_block','Mparser.py',48),
  ('block -> { morestatements }','block',3,'p_block','Mparser.py',49),
  ('statement -> ifstatement','statement',1,'p_statement','Mparser.py',56),
  ('statement -> loop','statement',1,'p_statement','Mparser.py',57),
  ('statement -> expr ;','statement',2,'p_statement','Mparser.py',58),
  ('statement -> returnstatement ;','statement',2,'p_statement','Mparser.py',59),
  ('statement -> assignstatement ;','statement',2,'p_statement','Mparser.py',60),
  ('statement -> printstatement ;','statement',2,'p_statement','Mparser.py',61),
  ('statement -> BREAK ;','statement',2,'p_statement','Mparser.py',62),
  ('statement -> CONTINUE ;','statement',2,'p_statement','Mparser.py',63),
  ('returnstatement -> RETURN','returnstatement',1,'p_return_statement','Mparser.py',74),
  ('returnstatement -> RETURN expr','returnstatement',2,'p_return_statement','Mparser.py',75),
  ('printstatement -> PRINT printables','printstatement',2,'p_print_statement','Mparser.py',83),
  ('printables -> printable','printables',1,'p_printables','Mparser.py',87),
  ('printables -> printable , printables','printables',3,'p_printables','Mparser.py',88),
  ('printable -> expr','printable',1,'p_pritable1','Mparser.py',96),
  ('printable -> STRING','printable',1,'p_pritable2','Mparser.py',100),
  ('assignstatement -> assignable = expr','assignstatement',3,'p_assign_statement','Mparser.py',105),
  ('assignstatement -> assignable ASSIGNPLUS expr','assignstatement',3,'p_assign_statement','Mparser.py',106),
  ('assignstatement -> assignable ASSIGNMINUS expr','assignstatement',3,'p_assign_statement','Mparser.py',107),
  ('assignstatement -> assignable ASSIGNTIMES expr','assignstatement',3,'p_assign_statement','Mparser.py',108),
  ('assignstatement -> assignable ASSIGNDIVIDE expr','assignstatement',3,'p_assign_statement','Mparser.py',109),
  ('assignable -> ID','assignable',1,'p_assignable','Mparser.py',114),
  ('assignable -> ID [ expr , expr ]','assignable',6,'p_assignable','Mparser.py',115),
  ('expr -> assignable','expr',1,'p_expr1','Mparser.py',122),
  ('expr -> INTNUMBER','expr',1,'p_expr2','Mparser.py',126),
  ('expr -> FLOATNUMBER','expr',1,'p_expr3','Mparser.py',130),
  ('expr -> - expr','expr',2,'p_expr4','Mparser.py',134),
  ("expr -> expr '",'expr',2,'p_expr4','Mparser.py',135),
  ('expr -> specialmatrixword ( expr )','expr',4,'p_expr4','Mparser.py',136),
  ('expr -> ( expr )','expr',3,'p_expr4','Mparser.py',137),
  ('expr -> [ matrixinitializer ]','expr',3,'p_expr4','Mparser.py',138),
  ('expr -> expr + expr','expr',3,'p_expr4','Mparser.py',139),
  ('expr -> expr - expr','expr',3,'p_expr4','Mparser.py',140),
  ('expr -> expr * expr','expr',3,'p_expr4','Mparser.py',141),
  ('expr -> expr / expr','expr',3,'p_expr4','Mparser.py',142),
  ('expr -> expr MPLUS expr','expr',3,'p_expr4','Mparser.py',143),
  ('expr -> expr MMINUS expr','expr',3,'p_expr4','Mparser.py',144),
  ('expr -> expr MTIMES expr','expr',3,'p_expr4','Mparser.py',145),
  ('expr -> expr MDIVIDE expr','expr',3,'p_expr4','Mparser.py',146),
  ('expr -> expr EQ expr','expr',3,'p_expr4','Mparser.py',147),
  ('expr -> expr NEQ expr','expr',3,'p_expr4','Mparser.py',148),
  ('expr -> expr > expr','expr',3,'p_expr4','Mparser.py',149),
  ('expr -> expr < expr','expr',3,'p_expr4','Mparser.py',150),
  ('expr -> expr LEQ expr','expr',3,'p_expr4','Mparser.py',151),
  ('expr -> expr GEQ expr','expr',3,'p_expr4','Mparser.py',152),
  ('specialmatrixword -> ZEROS','specialmatrixword',1,'p_special_matrix_word','Mparser.py',170),
  ('specialmatrixword -> ONES','specialmatrixword',1,'p_special_matrix_word','Mparser.py',171),
  ('specialmatrixword -> EYE','specialmatrixword',1,'p_special_matrix_word','Mparser.py',172),
  ('ifstatement -> IF ( expr ) block','ifstatement',5,'p_if_statement','Mparser.py',177),
  ('ifstatement -> IF ( expr ) block ELSE block','ifstatement',7,'p_if_statement','Mparser.py',178),
  ('loop -> forloop','loop',1,'p_loop','Mparser.py',185),
  ('loop -> whileloop','loop',1,'p_loop','Mparser.py',186),
  ('forloop -> FOR ID = rangeoperator block','forloop',5,'p_for_loop','Mparser.py',191),
  ('whileloop -> WHILE ( expr ) block','whileloop',5,'p_while_loop','Mparser.py',196),
  ('rangeoperator -> expr : expr','rangeoperator',3,'p_range_op','Mparser.py',201),
  ('matrixinitializer -> innerlist','matrixinitializer',1,'p_matrix_initializer1','Mparser.py',206),
  ('matrixinitializer -> morelist','matrixinitializer',1,'p_matrix_initializer','Mparser.py',210),
  ('morelist -> vector','morelist',1,'p_morelist','Mparser.py',214),
  ('morelist -> vector , morelist','morelist',3,'p_morelist','Mparser.py',215),
  ('vector -> [ innerlist ]','vector',3,'p_vector','Mparser.py',223),
  ('innerlist -> expr','innerlist',1,'p_innerlist','Mparser.py',229),
  ('innerlist -> expr , innerlist','innerlist',3,'p_innerlist','Mparser.py',230),
]
